version: 2.1
orbs:
  docker: circleci/docker@0.5.20
  slack: circleci/slack@3.4.2

# Parameters are available to all elements of config.yml, these are accessible using `pipeline.parameters.PARAMETER`
parameters:
  slack_channel:
    type: string
    default: '#cci-jahia-starter-template'
  AUDITCI_LEVEL:
    type: string
    default: 'moderate'
  TESTS_PATH:
    type: string
    default: 'tests/'
  TESTS_IMAGE:
    type: string
    default: 'jahia/jahia-starter-template-package'
  MODULE_ID:
    type: string
    default: 'jahia-starter-template-package'
  TESTRAIL_PROJECTNAME:
    type: string
    default: 'Jahia Starter Template Package'
  GITHUB_SLUG:
    type: string
    default: 'jahia/jahia-starter-template-package'
  PRIMARY_RELEASE_BRANCH:
    type: string
    default: 'main' # main or master ? set the branch for the main release
  RELEASE_ID:
    type: string
    default: ""
  RELEASE_VERSION:
    type: string
    default: ""
  IS_RELEASE:
    type: boolean
    default: false

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .

jobs:
  # The initialize clone and mvn install
  initialize:
    <<: *workdir
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - *persist-workspace

  # Build the module and save it locally
  # We're saving the artifacts that are then used later on to execute the tests
  # The artifacts are also stored and made available through circleci UI if further investigations are necessary
  build:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      - run: mvn -s .circleci/.circleci.settings.xml clean install
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      # Environment provisioning is sometimes dependent upon dependencies build during mvn clean install
      # This step copies those dependencies and make them available for further actions,
      # such as being used to provision a running Jahia with a set of freshly built artifacts
      - run: mvn -s .circleci/.circleci.settings.xml dependency:copy-dependencies
      - run:
          name: Prepare artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
            cp /home/circleci/source/target/*SNAPSHOT.jar /home/circleci/source/target/<< pipeline.parameters.MODULE_ID >>-SNAPSHOT.jar
      - store_artifacts:
          path: /tmp/artifacts/
      - *persist-workspace

  # publish to nexus only after merging to master
  publish:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-2-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn -s .circleci/.circleci.settings.xml clean install deploy
      - slack/status:
          channel: << pipeline.parameters.slack_channel >>
          fail_only: true
          include_project_field: true
          include_visit_job_action: true
          mentions: "channel"

  sonar:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:11-jdk-stretch
    resource_class: medium
    steps:
      - *attach-workspace
      - checkout
      - restore_cache:
          keys:
            - sonar-dependencies-{{ checksum "pom.xml" }}
            # Fallback if no exact match found
            - sonar-dependencies-
      # We're executing different actions depending fi the job was triggered by a PR or if it was triggered on branch
      # If the branch was not triggered by a PR, the CIRCLE_PULL_REQUEST variable will be empty
      - run:
          name: Sonar Release branch analysis
          command: |
            if [[ ! -z "$CIRCLE_PULL_REQUEST" ]]; then
              # echo "Git custom command to fix circle-ci checkout for sonar analysis"
              git fetch --all
              git branch -D << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
              git rev-parse origin/<< pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
              echo "Executing a PR based analysis"
              mvn -s .circleci/.circleci.settings.xml sonar:sonar \
                  -Dsonar.projectKey=<< pipeline.parameters.MODULE_ID >> \
                  -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                  -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} \
                  -Dsonar.pullrequest.base=<< pipeline.parameters.PRIMARY_RELEASE_BRANCH >> \
                  -Dsonar.pullrequest.github.repository=<< pipeline.parameters.GITHUB_SLUG >>
            elif [[ "$CIRCLE_BRANCH" == << pipeline.parameters.PRIMARY_RELEASE_BRANCH >> ]]; then
              echo "Executing an analysis on the main branch"
              mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.projectKey=<< pipeline.parameters.MODULE_ID >>
            else
              echo "Executing an analysis on branch: $CIRCLE_BRANCH"
              mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.branch.name=$CIRCLE_BRANCH
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: sonar-dependencies-{{ checksum "pom.xml" }}
  release:
    <<: *workdir
    docker: # run the steps with Docker
      - image: cimg/openjdk:8.0.275-node
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - add_ssh_keys:
          fingerprints:
            - "7a:64:1d:4e:d1:80:3c:85:d2:a3:c7:6f:01:21:87:68"
      - run:
          name: Delete github tag <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
            git tag --delete <<pipeline.parameters.RELEASE_VERSION>>
            git push --delete origin <<pipeline.parameters.RELEASE_VERSION>>
      - run:
          name: Release prepare version for <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            FINAL_RELEASE_VERSION=$(echo <<pipeline.parameters.RELEASE_VERSION>> | cut -d'-' -f 1)
            MAJOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f1`
            MINOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f2`
            REVISION=`echo $FINAL_RELEASE_VERSION | cut -d. -f3`
            NEXT_REVISION=`expr $REVISION + 1`
            NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT
            mvn -s .circleci/.circleci.settings.xml -B -Dtag=$FINAL_RELEASE_VERSION release:prepare -DreleaseVersion=$FINAL_RELEASE_VERSION -DdevelopmentVersion="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT
      - run:
          name: Update github release for id << pipeline.parameters.RELEASE_ID >>
          command: |
            yarn
            GH_TOKEN=${GITHUB_API_TOKEN} yarn auto changelog
            curl -X PATCH \
            -H "Accept:application/vnd.github.v3+json" \
            -d "{\"tag_name\":\"<<pipeline.parameters.RELEASE_VERSION>>\", \"prerelease\": false, \"draft\": false}" -u \
            jahia-ci:$GITHUB_API_TOKEN https://api.github.com/repos/<<pipeline.parameters.GITHUB_SLUG>>/releases/<< pipeline.parameters.RELEASE_ID >>
            curl \
            -H "Content-Type: $(file -b --mime-type CHANGELOG.md)" \
            -u jahia-ci:$GITHUB_API_TOKEN  \
            --data-binary @CHANGELOG.md \
            "https://uploads.github.com/repos/<<pipeline.parameters.GITHUB_SLUG>>/releases/<< pipeline.parameters.RELEASE_ID >>/assets?name=$(basename CHANGELOG.md)"
      - run:
          name: Perform release
          command: |
            mvn -s .circleci/.circleci.settings.xml release:perform -Prelease-to-staging-repository
      - run:
          name: Copy artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
      - save_cache:
          paths:
            - ~/.m2
          key: v3-dependencies-{{ checksum "pom.xml" }}

workflows:
  version: 2
  on-code-change:
    jobs:
      - initialize
      - build:
          context: QA_ENVIRONMENT
          requires:
            - initialize
      - sonar:
          context: QA_ENVIRONMENT
          requires:
            - build
      - publish:
          context: QA_ENVIRONMENT
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>

  # The on-release workflow was created to handle the full release lifecycle after creating a release using GitHub
  # https://github.com/Jahia/sandbox/releases
  # The release is first created using the "pre-release" tag and a pipeline is triggered from a GitHub action
  # This pipeline perform the following action:
  # - Delete the tag created by GitHub (unnecessary)
  # - Run mvn release:prepare
  # - Generate the changelog using auto (https://www.npmjs.com/package/auto)
  # - Run mvn release:perform
  on-release:
    when: << pipeline.parameters.IS_RELEASE >>
    jobs:
      - release:
          context: QA_ENVIRONMENT